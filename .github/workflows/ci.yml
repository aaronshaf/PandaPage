name: CI

# Branch Protection Setup:
# Configure branch protection to require "CI Status" check instead of individual jobs.
# This allows efficient sequential testing while providing a single status for PR merging.

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUN_VERSION: latest
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers

jobs:
  # Build packages once and share artifacts
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ env.BUN_VERSION }}
    
    # Cache Bun dependencies
    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.bun/install/cache
          node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Build all packages
      run: bun run build
    
    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          packages/*/dist
          packages/*/build
        retention-days: 1

  # Run linting checks in parallel (formatting is not enforced)
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ env.BUN_VERSION }}
    
    # Cache Bun dependencies
    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.bun/install/cache
          node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Run Biome lint (check only)
      run: bunx biome lint . --diagnostic-level=error
      
    - name: Check file sizes
      run: bun run check-file-sizes

  # Run TypeScript checks using build artifacts
  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ env.BUN_VERSION }}
    
    # Cache Bun dependencies
    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.bun/install/cache
          node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    # Download build artifacts
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: packages
      
    - name: TypeScript check
      run: bun run typecheck

  # Run unit tests using build artifacts
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ env.BUN_VERSION }}
    
    # Cache Bun dependencies
    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.bun/install/cache
          node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    # Download build artifacts
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: packages
      
    - name: Run unit tests with coverage
      run: bun run test:coverage

  # Run E2E tests after build completes
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]  # Only depends on build artifacts
    strategy:
      matrix:
        # Run tests in parallel shards
        shard: [1, 2]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ env.BUN_VERSION }}
    
    # Cache Bun dependencies
    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.bun/install/cache
          node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    # Cache Playwright browsers
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
        key: ${{ runner.os }}-playwright-${{ hashFiles('packages/viewer/package.json', 'packages/viewer/playwright.config.ts') }}-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-playwright-${{ hashFiles('packages/viewer/package.json', 'packages/viewer/playwright.config.ts') }}-
          ${{ runner.os }}-playwright-
      
    # Get Playwright version for conditional installation
    - name: Get Playwright version
      id: playwright-version
      run: |
        cd packages/viewer
        PLAYWRIGHT_VERSION=$(bunx playwright --version | awk '{print $2}')
        echo "version=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT
      
    # Only install if cache miss or version mismatch
    - name: Install Playwright browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: cd packages/viewer && bunx playwright install --with-deps
      
    # Skip system dependencies if browsers are cached
    # They are included with --with-deps during browser installation
    - name: Verify Playwright installation
      if: steps.playwright-cache.outputs.cache-hit == 'true'
      run: |
        cd packages/viewer
        # Just verify the browsers work, don't install deps
        bunx playwright --version
      
    - name: Build viewer app
      run: cd packages/viewer && bun run build
      
    - name: Run E2E tests (shard ${{ matrix.shard }}/${{ strategy.job-total }})
      run: cd packages/viewer && bun run test:e2e -- --shard=${{ matrix.shard }}/${{ strategy.job-total }}
      
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report-shard-${{ matrix.shard }}
        path: packages/viewer/playwright-report/
        retention-days: 30

  # Final status check for branch protection
  all-checks-passed:
    name: CI Status
    runs-on: ubuntu-latest
    if: always()
    needs: [lint, typecheck, unit-tests, e2e-tests]
    steps:
    - name: Check all job statuses
      run: |
        if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
          echo "❌ One or more CI checks failed"
          exit 1
        elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
          echo "⚠️ One or more CI checks were cancelled"
          exit 1
        else
          echo "✅ All CI checks passed successfully!"
        fi