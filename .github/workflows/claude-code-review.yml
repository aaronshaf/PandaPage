name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  wait-for-ci:
    runs-on: ubuntu-latest
    outputs:
      should-continue: ${{ steps.wait.outputs.should-continue }}
    steps:
      - name: Wait for CI to complete
        id: wait
        uses: actions/github-script@v7
        with:
          script: |
            // Wait up to 10 minutes for CI to complete
            const maxAttempts = 20; // 20 * 30s = 10 minutes
            let attempts = 0;
            
            while (attempts < maxAttempts) {
              attempts++;
              
              // Get check runs for this commit
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request.head.sha,
              });
              
              // Find the CI Status check
              const ciCheck = checkRuns.check_runs.find(run => 
                run.name === 'CI Status' || run.name === 'all-checks-passed'
              );
              
              if (ciCheck) {
                console.log(`CI check status: ${ciCheck.status}, conclusion: ${ciCheck.conclusion}`);
                
                if (ciCheck.status === 'completed') {
                  // CI has completed, check if it passed
                  if (ciCheck.conclusion === 'success') {
                    console.log('CI passed! Proceeding with Claude review.');
                    core.setOutput('should-continue', 'true');
                    return;
                  } else {
                    console.log('CI failed. Skipping Claude review.');
                    core.setOutput('should-continue', 'false');
                    return;
                  }
                }
              }
              
              console.log(`Attempt ${attempts}/${maxAttempts}: CI not complete yet, waiting 30s...`);
              await new Promise(resolve => setTimeout(resolve, 30000)); // Wait 30s
            }
            
            console.log('Timeout waiting for CI. Skipping Claude review.');
            core.setOutput('should-continue', 'false');

  claude-review:
    needs: wait-for-ci
    if: needs.wait-for-ci.outputs.should-continue == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write      # For checking out code and potential fixes
      pull-requests: write # For commenting on PRs
      issues: write        # For creating issues if needed
      id-token: write
      actions: read       # For reading CI results
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request and provide feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage
            
            Be constructive and helpful in your feedback.

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Optional: Add specific tools for running tests or linting
          allowed_tools: |
            Bash(bun install)
            Bash(bun test)
            Bash(bun run test:*)
            Bash(bun run coverage)
            Bash(bun run lint)
            Bash(bun run typecheck)
            Bash(bun run check)
            Grep
            Read
          
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')