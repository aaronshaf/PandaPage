// dml-main.ts - Re-export all DrawingML types from modular files
import type { ST_RelationshipId, ST_Guid, ST_String, ST_HexColorRGB, ST_UniversalMeasure, ST_PositiveUniversalMeasure, ST_Percentage, ST_FixedPercentage, ST_PositiveFixedPercentage } from './shared-types';

// Re-export all types from modular files for backward compatibility
export * from './dml-media';
export * from './dml-fonts';
export * from './dml-colors';
export * from './dml-shapes';
export * from './dml-effects';
export * from './dml-animation';

// Import commonly used types from extracted modules
import type { 
  CT_OfficeArtExtension, 
  CT_OfficeArtExtensionList,
  EG_ColorChoice,
  CT_Color,
  CT_ColorScheme,
  ST_ColorSchemeIndex
} from './dml-colors';

import type {
  CT_Transform2D,
  CT_Point2D,
  CT_PositiveSize2D,
  CT_ShapeProperties,
  CT_GroupShapeProperties,
  CT_ShapeStyle,
  CT_StyleMatrixReference,
  CT_Connection
} from './dml-shapes';

import type {
  CT_FontReference,
  CT_TextFont,
  CT_FontCollection,
  CT_FontScheme,
  ST_FontCollectionIndex
} from './dml-fonts';

import type {
  EG_FillProperties,
  EG_EffectProperties,
  CT_EffectList,
  CT_StyleMatrix,
  CT_BaseStyles
} from './dml-effects';

// Text-related types not extracted to other modules
export enum ST_TextVerticalType {
  Horz = "horz",
  Vert = "vert",
  Vert270 = "vert270",
  WordArtVert = "wordArtVert",
  EaVert = "eaVert",
  Mongolian = "mongolianVert",
  WordArtVertRtl = "wordArtVertRtl"
}

export enum ST_TextAlignType {
  L = "l",
  Ctr = "ctr",
  R = "r",
  Just = "just",
  JustLow = "justLow",
  Dist = "dist",
  ThaiDist = "thaiDist"
}

export enum ST_TextUnderlineType {
  None = "none",
  Words = "words",
  Sng = "sng",
  Dbl = "dbl",
  Heavy = "heavy",
  Dotted = "dotted",
  DottedHeavy = "dottedHeavy",
  Dash = "dash",
  DashHeavy = "dashHeavy",
  DashLong = "dashLong",
  DashLongHeavy = "dashLongHeavy",
  DotDash = "dotDash",
  DotDashHeavy = "dotDashHeavy",
  DotDotDash = "dotDotDash",
  DotDotDashHeavy = "dotDotDashHeavy",
  Wavy = "wavy",
  WavyHeavy = "wavyHeavy",
  WavyDbl = "wavyDbl"
}

export enum ST_TextStrikeType {
  NoStrike = "noStrike",
  SngStrike = "sngStrike",
  DblStrike = "dblStrike"
}

export enum ST_TextCapsType {
  None = "none",
  Small = "small",
  All = "all"
}

export enum ST_TextAutonumberScheme {
  AlphaLcParenBoth = "alphaLcParenBoth",
  AlphaUcParenBoth = "alphaUcParenBoth",
  AlphaLcParenR = "alphaLcParenR",
  AlphaUcParenR = "alphaUcParenR",
  AlphaLcPeriod = "alphaLcPeriod",
  AlphaUcPeriod = "alphaUcPeriod",
  ArabicParenBoth = "arabicParenBoth",
  ArabicParenR = "arabicParenR",
  ArabicPeriod = "arabicPeriod",
  ArabicPlain = "arabicPlain",
  RomanLcParenBoth = "romanLcParenBoth",
  RomanUcParenBoth = "romanUcParenBoth",
  RomanLcParenR = "romanLcParenR",
  RomanUcParenR = "romanUcParenR",
  RomanLcPeriod = "romanLcPeriod",
  RomanUcPeriod = "romanUcPeriod",
  CircleNumDbPlain = "circleNumDbPlain",
  CircleNumWdBlackPlain = "circleNumWdBlackPlain",
  CircleNumWdWhitePlain = "circleNumWdWhitePlain",
  ArabicDbPeriod = "arabicDbPeriod",
  ArabicDbPlain = "arabicDbPlain",
  Ea1ChsPeriod = "ea1ChsPeriod",
  Ea1ChsPlain = "ea1ChsPlain",
  Ea1ChtPeriod = "ea1ChtPeriod",
  Ea1ChtPlain = "ea1ChtPlain",
  Ea1JpnChsDbPeriod = "ea1JpnChsDbPeriod",
  Ea1JpnKorPlain = "ea1JpnKorPlain",
  Ea1JpnKorPeriod = "ea1JpnKorPeriod",
  Arabic1Minus = "arabic1Minus",
  Arabic2Minus = "arabic2Minus",
  Hebrew2Minus = "hebrew2Minus",
  ThaiAlphaPeriod = "thaiAlphaPeriod",
  ThaiAlphaParenR = "thaiAlphaParenR",
  ThaiAlphaParenBoth = "thaiAlphaParenBoth",
  ThaiNumPeriod = "thaiNumPeriod",
  ThaiNumParenR = "thaiNumParenR",
  ThaiNumParenBoth = "thaiNumParenBoth",
  HindiAlphaPeriod = "hindiAlphaPeriod",
  HindiNumPeriod = "hindiNumPeriod",
  HindiNumParenR = "hindiNumParenR",
  HindiAlpha1Period = "hindiAlpha1Period"
}

export enum ST_TextTabAlignType {
  L = "l",
  Ctr = "ctr",
  R = "r",
  Dec = "dec"
}

export enum ST_TextWrappingType {
  None = "none",
  Square = "square"
}

export enum ST_TextColumnCount {
  Count1 = 1,
  Count2 = 2,
  Count3 = 3,
  Count4 = 4,
  Count5 = 5,
  Count6 = 6,
  Count7 = 7,
  Count8 = 8,
  Count9 = 9,
  Count10 = 10,
  Count11 = 11,
  Count12 = 12,
  Count13 = 13,
  Count14 = 14,
  Count15 = 15,
  Count16 = 16
}

export enum ST_TextAnchoringType {
  T = "t",
  Ctr = "ctr",
  B = "b",
  Just = "just",
  Dist = "dist"
}

export enum ST_TextHorzOverflowType {
  Overflow = "overflow",
  Clip = "clip"
}

export enum ST_TextVertOverflowType {
  Overflow = "overflow",
  Ellipsis = "ellipsis",
  Clip = "clip"
}

// Text properties interfaces
export interface CT_TextUnderline {
  u?: { val?: ST_TextUnderlineType };
  uFill?: EG_FillProperties;
  uFillTx?: any; // Empty element
}

export interface CT_TextCharacterProperties {
  ln?: any; // CT_LineProperties
  noFill?: any; // Empty element
  solidFill?: any; // CT_SolidColorFillProperties
  gradFill?: any; // CT_GradientFillProperties
  blipFill?: any; // CT_BlipFillProperties
  pattFill?: any; // CT_PatternFillProperties
  grpFill?: any; // Empty element
  effectLst?: CT_EffectList;
  effectDag?: any; // CT_EffectContainer
  highlight?: EG_ColorChoice;
  uLnTx?: any; // Empty element
  uLn?: CT_TextUnderline;
  uFillTx?: any; // Empty element
  uFill?: EG_FillProperties;
  latin?: CT_TextFont;
  ea?: CT_TextFont;
  cs?: CT_TextFont;
  sym?: CT_TextFont;
  hlinkClick?: CT_Hyperlink;
  hlinkMouseOver?: CT_Hyperlink;
  rtl?: { val?: boolean };
  kumimoji?: { val?: boolean };
  lang?: { val?: ST_String };
  altLang?: { val?: ST_String };
  sz?: { val?: number }; // Text size in points * 100
  b?: { val?: boolean };
  i?: { val?: boolean };
  u?: { val?: ST_TextUnderlineType };
  strike?: { val?: ST_TextStrikeType };
  kern?: { val?: number };
  cap?: { val?: ST_TextCapsType };
  spc?: { val?: number };
  normalizeH?: { val?: boolean };
  baseline?: { val?: ST_Percentage };
  noProof?: { val?: boolean };
  dirty?: { val?: boolean };
  err?: { val?: boolean };
  smtClean?: { val?: boolean };
  smtId?: { val?: number };
  bmk?: { val?: ST_String };
  extLst?: CT_OfficeArtExtensionList;
}

export interface CT_TextTab {
  pos?: ST_Coordinate;
  algn?: ST_TextTabAlignType;
}

export interface CT_TextTabStop {
  tab?: CT_TextTab[];
}

export interface CT_TextLineBreak {
  rPr?: CT_TextCharacterProperties;
}

export interface CT_RegularTextRun {
  rPr?: CT_TextCharacterProperties;
  t: ST_String;
}

export interface CT_TextField {
  id: ST_Guid;
  type?: ST_String;
  rPr?: CT_TextCharacterProperties;
  pPr?: any; // CT_TextParagraphProperties
  t?: ST_String;
}

export type EG_TextRun = CT_RegularTextRun | CT_TextLineBreak | CT_TextField;

export interface CT_TextParagraphProperties {
  lnSpc?: any; // CT_TextSpacing
  spcBef?: any; // CT_TextSpacing
  spcAft?: any; // CT_TextSpacing
  buClrTx?: any; // Empty element
  buClr?: EG_ColorChoice;
  buSzTx?: any; // Empty element
  buSzPct?: { val?: ST_TextBulletSizePercent };
  buSzPts?: { val?: ST_TextBulletSizePoint };
  buFontTx?: any; // Empty element
  buFont?: CT_TextFont;
  buNone?: any; // Empty element
  buAutoNum?: { type: ST_TextAutonumberScheme; startAt?: number };
  buChar?: { char: ST_String };
  buBlip?: any; // CT_TextBlipBullet
  tabLst?: CT_TextTabStop;
  defRPr?: CT_TextCharacterProperties;
  extLst?: CT_OfficeArtExtensionList;
  marL?: ST_TextMargin;
  marR?: ST_TextMargin;
  lvl?: ST_TextIndentLevelType;
  indent?: ST_TextIndent;
  algn?: ST_TextAlignType;
  defTabSz?: ST_Coordinate;
  rtl?: boolean;
  eaLnBrk?: boolean;
  fontAlgn?: ST_TextFontAlignType;
  latinLnBrk?: boolean;
  hangingPunct?: boolean;
}

export interface CT_TextParagraph {
  pPr?: CT_TextParagraphProperties;
  r?: EG_TextRun[];
  br?: CT_TextLineBreak[];
  fld?: CT_TextField[];
  endParaRPr?: CT_TextCharacterProperties;
}

export interface CT_TextListStyle {
  defPPr?: CT_TextParagraphProperties;
  lvl1pPr?: CT_TextParagraphProperties;
  lvl2pPr?: CT_TextParagraphProperties;
  lvl3pPr?: CT_TextParagraphProperties;
  lvl4pPr?: CT_TextParagraphProperties;
  lvl5pPr?: CT_TextParagraphProperties;
  lvl6pPr?: CT_TextParagraphProperties;
  lvl7pPr?: CT_TextParagraphProperties;
  lvl8pPr?: CT_TextParagraphProperties;
  lvl9pPr?: CT_TextParagraphProperties;
  extLst?: CT_OfficeArtExtensionList;
}

export interface CT_TextBodyProperties {
  rot?: ST_Angle;
  spcFirstLastPara?: boolean;
  vertOverflow?: ST_TextVertOverflowType;
  horzOverflow?: ST_TextHorzOverflowType;
  vert?: ST_TextVerticalType;
  wrap?: ST_TextWrappingType;
  lIns?: ST_Coordinate;
  tIns?: ST_Coordinate;
  rIns?: ST_Coordinate;
  bIns?: ST_Coordinate;
  numCol?: ST_TextColumnCount;
  spcCol?: ST_PositiveCoordinate;
  rtlCol?: boolean;
  fromWordArt?: boolean;
  anchor?: ST_TextAnchoringType;
  anchorCtr?: boolean;
  forceAA?: boolean;
  upright?: boolean;
  compatLnSpc?: boolean;
  prstTxWarp?: any; // CT_PresetTextShape
  noAutofit?: any; // Empty element
  normAutofit?: any; // Empty element
  spAutoFit?: any; // Empty element
  scene3d?: any; // CT_Scene3D
  sp3d?: any; // CT_Shape3D
  flatTx?: any; // CT_FlatText
  extLst?: CT_OfficeArtExtensionList;
}

export interface CT_TextBody {
  bodyPr: CT_TextBodyProperties;
  lstStyle?: CT_TextListStyle;
  p: CT_TextParagraph[];
}

// Hyperlink interface
export interface CT_Hyperlink {
  hlinkClick?: { 'r:id'?: ST_RelationshipId };
  hlinkMouseOver?: { 'r:id'?: ST_RelationshipId };
  tooltip?: ST_String;
  tgtFrame?: ST_String;
  invalidUrl?: ST_String;
  action?: ST_String;
  history?: boolean;
  highlightClick?: boolean;
  endSnd?: boolean;
  extLst?: CT_OfficeArtExtensionList;
}

// Type aliases for convenience
export type ST_TextMargin = ST_Coordinate;
export type ST_TextIndentLevelType = number; // 0-8
export type ST_TextIndent = ST_Coordinate;
export type ST_TextFontAlignType = "auto" | "t" | "ctr" | "base" | "b";
export type ST_TextBulletSizePercent = ST_Percentage;
export type ST_TextBulletSizePoint = number; // 1-4000

// Additional types that may be referenced
export interface CT_Empty {}
export interface CT_WholeE2oFormatting {
  ln?: any; // CT_LineProperties from dml-shapes
  effectLst?: CT_EffectList;
  effectDag?: any; // CT_EffectContainer
  extLst?: CT_OfficeArtExtensionList;
}

export interface CT_BackgroundFormatting {
  noFill?: CT_Empty;
  solidFill?: any; // CT_SolidColorFillProperties
  gradFill?: any; // CT_GradientFillProperties
  blipFill?: any; // CT_BlipFillProperties
  pattFill?: any; // CT_PatternFillProperties
  grpFill?: CT_Empty;
  effectLst?: CT_EffectList;
  effectDag?: any; // CT_EffectContainer
  extLst?: CT_OfficeArtExtensionList;
}

// Camera and lighting types (3D scene)
export enum ST_PresetCameraType {
  LegacyObliqueTopLeft = "legacyObliqueTopLeft",
  LegacyObliqueTop = "legacyObliqueTop",
  LegacyObliqueTopRight = "legacyObliqueTopRight",
  LegacyObliqueLeft = "legacyObliqueLeft",
  LegacyObliqueFront = "legacyObliqueFront",
  LegacyObliqueRight = "legacyObliqueRight",
  LegacyObliqueBottomLeft = "legacyObliqueBottomLeft",
  LegacyObliqueBottom = "legacyObliqueBottom",
  LegacyObliqueBottomRight = "legacyObliqueBottomRight",
  LegacyPerspectiveTopLeft = "legacyPerspectiveTopLeft",
  LegacyPerspectiveTop = "legacyPerspectiveTop",
  LegacyPerspectiveTopRight = "legacyPerspectiveTopRight",
  LegacyPerspectiveLeft = "legacyPerspectiveLeft",
  LegacyPerspectiveFront = "legacyPerspectiveFront",
  LegacyPerspectiveRight = "legacyPerspectiveRight",
  LegacyPerspectiveBottomLeft = "legacyPerspectiveBottomLeft",
  LegacyPerspectiveBottom = "legacyPerspectiveBottom",
  LegacyPerspectiveBottomRight = "legacyPerspectiveBottomRight",
  OrthographicFront = "orthographicFront",
  IsometricTopUp = "isometricTopUp",
  IsometricTopDown = "isometricTopDown",
  IsometricBottomUp = "isometricBottomUp",
  IsometricBottomDown = "isometricBottomDown",
  IsometricLeftUp = "isometricLeftUp",
  IsometricLeftDown = "isometricLeftDown",
  IsometricRightUp = "isometricRightUp",
  IsometricRightDown = "isometricRightDown",
  IsometricOffAxis1Left = "isometricOffAxis1Left",
  IsometricOffAxis1Right = "isometricOffAxis1Right",
  IsometricOffAxis1Top = "isometricOffAxis1Top",
  IsometricOffAxis2Left = "isometricOffAxis2Left",
  IsometricOffAxis2Right = "isometricOffAxis2Right",
  IsometricOffAxis2Top = "isometricOffAxis2Top",
  IsometricOffAxis3Left = "isometricOffAxis3Left",
  IsometricOffAxis3Right = "isometricOffAxis3Right",
  IsometricOffAxis3Bottom = "isometricOffAxis3Bottom",
  IsometricOffAxis4Left = "isometricOffAxis4Left",
  IsometricOffAxis4Right = "isometricOffAxis4Right",
  IsometricOffAxis4Bottom = "isometricOffAxis4Bottom",
  ObliqueTopLeft = "obliqueTopLeft",
  ObliqueTop = "obliqueTop",
  ObliqueTopRight = "obliqueTopRight",
  ObliqueLeft = "obliqueLeft",
  ObliqueRight = "obliqueRight",
  ObliqueBottomLeft = "obliqueBottomLeft",
  ObliqueBottom = "obliqueBottom",
  ObliqueBottomRight = "obliqueBottomRight",
  PerspectiveFront = "perspectiveFront",
  PerspectiveLeft = "perspectiveLeft",
  PerspectiveRight = "perspectiveRight",
  PerspectiveAbove = "perspectiveAbove",
  PerspectiveBelow = "perspectiveBelow",
  PerspectiveAboveLeftFacing = "perspectiveAboveLeftFacing",
  PerspectiveAboveRightFacing = "perspectiveAboveRightFacing",
  PerspectiveContrastingLeftFacing = "perspectiveContrastingLeftFacing",
  PerspectiveContrastingRightFacing = "perspectiveContrastingRightFacing",
  PerspectiveHeroicLeftFacing = "perspectiveHeroicLeftFacing",
  PerspectiveHeroicRightFacing = "perspectiveHeroicRightFacing",
  PerspectiveHeroicExtremeLeftFacing = "perspectiveHeroicExtremeLeftFacing",
  PerspectiveHeroicExtremeRightFacing = "perspectiveHeroicExtremeRightFacing",
  PerspectiveRelaxed = "perspectiveRelaxed",
  PerspectiveRelaxedModerately = "perspectiveRelaxedModerately"
}

export enum ST_LightRigType {
  LegacyFlat1 = "legacyFlat1",
  LegacyFlat2 = "legacyFlat2",
  LegacyFlat3 = "legacyFlat3",
  LegacyFlat4 = "legacyFlat4",
  LegacyNormal1 = "legacyNormal1",
  LegacyNormal2 = "legacyNormal2",
  LegacyNormal3 = "legacyNormal3",
  LegacyNormal4 = "legacyNormal4",
  LegacyHarsh1 = "legacyHarsh1",
  LegacyHarsh2 = "legacyHarsh2",
  LegacyHarsh3 = "legacyHarsh3",
  LegacyHarsh4 = "legacyHarsh4",
  ThreePt = "threePt",
  Balanced = "balanced",
  Soft = "soft",
  Harsh = "harsh",
  Flood = "flood",
  Contrasting = "contrasting",
  Morning = "morning",
  Sunrise = "sunrise",
  Sunset = "sunset",
  Chilly = "chilly",
  Freezing = "freezing",
  Flat = "flat",
  TwoPt = "twoPt",
  Glow = "glow",
  BrightRoom = "brightRoom"
}

export enum ST_LightRigDirection {
  Tl = "tl",
  T = "t",
  Tr = "tr",
  L = "l",
  Tr = "tr",
  R = "r",
  Bl = "bl",
  B = "b",
  Br = "br"
}

export interface CT_Spherical3DCoords {
  lat: ST_Coordinate;
  lon: ST_Coordinate;
  rev: ST_PositiveCoordinate;
}

export interface CT_Camera {
  prst: ST_PresetCameraType;
  fov?: number; // 0-180 degrees * 60000
  zoom?: ST_PositivePercentage;
  rot?: CT_Spherical3DCoords;
  extLst?: CT_OfficeArtExtensionList;
}

export interface CT_LightRig {
  rig: ST_LightRigType;
  dir: ST_LightRigDirection;
  rot?: CT_Spherical3DCoords;
  extLst?: CT_OfficeArtExtensionList;
}